class c{static async get(n,s={}){return s.method="GET",c.request(n,s)}static async post(n,s,e={}){e.method="POST",e.headers=e.headers||{},(!e.headers||!("Content-Type"in e.headers))&&(e.headers["Content-Type"]="application/json");const a=e.headers["Content-Type"]||"application/json";if(a==="application/json")e.body=JSON.stringify(s);else if(a==="application/x-www-form-urlencoded"){const t=new URLSearchParams;for(const[r,o]of Object.entries(s))t.append(r,o);e.body=t.toString()}else if(a==="multipart/form-data")if(delete e.headers["Content-Type"],s instanceof FormData)e.body=s;else{const t=new FormData;s.values().forEach((r,o)=>{t.append(o,r)}),e.body=t}else e.body=s.toString();return c.request(n,e)}static async request(n,s={}){try{const e=await fetch(n,s);if(!e.ok)return{code:e.status,msg:e.statusText,data:null};const a=e.headers.get("content-type");if(a&&a.includes("application/json")){const t=await e.json();return typeof t=="object"&&"code"in t&&"msg"in t&&"data"in t?t:{code:200,msg:"success",data:t}}else return a&&a.includes("text/html")?{code:200,msg:"success",data:await e.text()}:{code:200,msg:"success",data:await e.blob()}}catch(e){return{code:500,msg:e.msg,data:null}}}static async doRequest(n,s,e,a){const t={method:s.toUpperCase(),headers:e};if(a)if(s.toUpperCase()==="GET"){const r=new URLSearchParams(a).toString();n=`${n}?${r}`}else t.headers={"Content-Type":"application/json",...t.headers},t.body=JSON.stringify(a);return c.request(n,t)}}export{c as F};
