{"version":3,"sources":["comps/antd-common/line/AntdLineCommonConfig.tsx"],"names":["AntdLineCommonStyleConfig","legendChange","legend","props","instance","update","style","lineCoordinateSysChange","config","lineGraphicsChange","this","getConfig","AntdLineGraphics","onChange","Component","title","defaultValue","value","smooth","lineStyle","lineWidth","type","min","event","parseInt","target","itemStyle","width","contentStyle","data","mode","stroke","undefined","color","startsWith","split","buildColorModeData","point","size","height","borderRadius","showText","options","label","shape","AntdLineFieldMapping","xField","yField","seriesField","length","dataObj","Object","keys","forEach","key","push","fieldChange"],"mappings":"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","file":"static/js/8.19a78e20.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {ConfigType} from \"../../../designer/right/ConfigType\";\r\nimport {AntdCartesianCoordinateSys, AntdLegend} from \"../config/AntdFragment\";\r\nimport {LineOptions, ShapeStyle} from \"@antv/g2plot\";\r\nimport {Legend} from \"@antv/g2plot/lib/types/legend\";\r\nimport AntdCommonLine from \"./AntdCommonLine\";\r\nimport {WritableBarOptions, WritableLineOptions} from \"../types\";\r\nimport ColorMode, {ColorModeValue} from \"../../../lib/lc-color-mode/ColorMode\";\r\nimport {ShapeAttrs} from \"@antv/g-base\";\r\nimport Accordion from \"../../../lib/lc-accordion/Accordion\";\r\nimport ConfigItem from \"../../../lib/lc-config-item/ConfigItem\";\r\nimport LcSwitch from '../../../lib/lc-switch/LcSwitch';\r\nimport UnderLineInput from \"../../../lib/lc-input/UnderLineInput\";\r\nimport ConfigCard from \"../../../lib/lc-config-card/ConfigCard\";\r\nimport {MappingOptions} from '@antv/g2plot/lib/adaptor/geometries/base';\r\nimport BaseColorPicker from \"../../../lib/lc-color-picker/BaseColorPicker\";\r\nimport CfgItemBorder from \"../../../lib/lc-config-item/CfgItemBorder\";\r\nimport Select from \"../../../lib/lc-select/Select\";\r\nimport {Option} from \"../../../lib/lc-select/SelectType\";\r\n\r\nclass AntdLineCommonStyleConfig extends Component<ConfigType> {\r\n\r\n    legendChange = (legend: Legend) => {\r\n        const instance = this.props.instance as AntdCommonLine;\r\n        instance.update({style: {legend}});\r\n    }\r\n\r\n    lineCoordinateSysChange = (config: LineOptions) => {\r\n        const instance = this.props.instance as AntdCommonLine;\r\n        instance.update({style: config});\r\n    }\r\n\r\n    lineGraphicsChange = (config: LineOptions) => {\r\n        const instance = this.props.instance as AntdCommonLine;\r\n        instance.update({style: config});\r\n    }\r\n\r\n    render() {\r\n        const {instance} = this.props;\r\n        const config: LineOptions = instance.getConfig().style;\r\n        return (\r\n            <>\r\n                <AntdLineGraphics onChange={this.lineGraphicsChange} config={config}/>\r\n                <AntdLegend onChange={this.legendChange} config={config.legend}/>\r\n                <AntdCartesianCoordinateSys onChange={this.lineCoordinateSysChange} config={config}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport {AntdLineCommonStyleConfig};\r\n\r\n\r\nexport interface AntdLineGraphicsProps {\r\n    config?: WritableLineOptions;\r\n\r\n    onChange(config: WritableLineOptions): void;\r\n}\r\n\r\nexport const AntdLineGraphics: React.FC<AntdLineGraphicsProps> = ({config, onChange}) => {\r\n\r\n    const LineColorChange = (data: ColorModeValue) => {\r\n        const {mode, value} = data;\r\n        switch (mode) {\r\n            case 'single':\r\n                onChange({lineStyle: {stroke: value as string}});\r\n                break;\r\n            case 'multi':\r\n                onChange({lineStyle: {stroke: undefined, color: value as string[]}});\r\n                break;\r\n            case 'gradient':\r\n                onChange({lineStyle: {stroke: `l(0) 0:${value[0]} 1:${value[1]}`}});\r\n                break;\r\n        }\r\n    }\r\n\r\n    const buildColorModeData = (): ColorModeValue => {\r\n        let mode = 'single', value: string | string[] = '#fff';\r\n        if ((config?.lineStyle as ShapeAttrs)?.stroke) {\r\n            const stroke = (config?.lineStyle as ShapeAttrs).stroke as string;\r\n            if (stroke.startsWith('l')) {\r\n                mode = 'gradient';\r\n                value = [stroke.split(':')[1].split(' ')[0], stroke.split(':')[2].split(' ')[0]];\r\n            } else {\r\n                mode = 'single';\r\n                value = stroke;\r\n            }\r\n        } else if (config?.color) {\r\n            mode = 'multi';\r\n            value = config?.color as string[];\r\n        }\r\n        return {mode, value};\r\n    }\r\n\r\n    return (\r\n        <Accordion title={'图形'}>\r\n            <ConfigCard title={'线条'}>\r\n                <ConfigItem title={'平滑'}>\r\n                    <LcSwitch defaultValue={!!config}\r\n                              onChange={(value) => onChange({smooth: value})}/>\r\n                </ConfigItem>\r\n                <ConfigItem title={'线宽'}>\r\n                    <UnderLineInput defaultValue={(config?.lineStyle as ShapeStyle)?.lineWidth}\r\n                                    type={'number'} min={0}\r\n                                    onChange={(event) =>\r\n                                        onChange({lineStyle: {lineWidth: parseInt(event.target.value)}})}/>\r\n                </ConfigItem>\r\n                <ConfigItem title={'颜色'} itemStyle={{width: '100%'}} contentStyle={{width: '85%'}}>\r\n                    <ColorMode onChange={LineColorChange} data={buildColorModeData()}/>\r\n                </ConfigItem>\r\n            </ConfigCard>\r\n            <ConfigCard title={'点'}>\r\n                <ConfigItem title={'尺寸'}>\r\n                    <UnderLineInput defaultValue={(config?.point as MappingOptions)?.size as number || 0}\r\n                                    type={'number'} min={0}\r\n                                    onChange={(event) =>\r\n                                        onChange({point: {size: parseInt(event.target.value)}})}/>\r\n                </ConfigItem>\r\n                <ConfigItem title={'颜色'}>\r\n                    <CfgItemBorder width={'100%'}>\r\n                        <BaseColorPicker\r\n                            defaultValue={config?.point?.color as string || '#fff'}\r\n                            onChange={(value) => onChange({point: {color: value}})}\r\n                            style={{width: '100%', height: '15px', borderRadius: 2}} showText={true}/>\r\n                    </CfgItemBorder>\r\n                </ConfigItem>\r\n                <ConfigItem title={'形状'}>\r\n                    <Select options={[\r\n                        {value: 'circle', label: '圈形'},\r\n                        {value: 'square', label: '方形'},\r\n                        {value: 'bowtie', label: '领结'},\r\n                        {value: 'diamond', label: '钻石'},\r\n                        {value: 'hexagon', label: '六角形'},\r\n                        {value: 'triangle', label: '三角形'}]}\r\n                            defaultValue={config?.point?.shape as string || 'circle'}\r\n                            onChange={(value) => onChange({point: {shape: value}})}/>\r\n                </ConfigItem>\r\n            </ConfigCard>\r\n        </Accordion>\r\n    )\r\n}\r\n\r\n\r\nexport const AntdLineFieldMapping: React.FC<ConfigType<AntdCommonLine>> = ({instance}) => {\r\n    const config = instance.getConfig()!.style;\r\n    const {data, xField, yField, seriesField} = config!;\r\n    const options: Option[] = [];\r\n    if (data && data.length >= 1) {\r\n        const dataObj = data[0];\r\n        Object.keys(dataObj).forEach(key => options.push({label: key, value: key}))\r\n    }\r\n\r\n    const fieldChange = (config: WritableBarOptions) => {\r\n        instance.update({style: config});\r\n    }\r\n\r\n    return (\r\n        <ConfigCard title={'字段映射'}>\r\n            <ConfigItem title={'X字段'}>\r\n                <Select options={options} defaultValue={xField} onChange={(value => fieldChange({xField: value}))}/>\r\n            </ConfigItem>\r\n            <ConfigItem title={'Y字段'}>\r\n                <Select options={options} defaultValue={yField} onChange={(value => fieldChange({yField: value}))}/>\r\n            </ConfigItem>\r\n            <ConfigItem title={'分类字段'}>\r\n                <Select options={options} defaultValue={seriesField}\r\n                        onChange={(value => fieldChange({seriesField: value}))}/>\r\n            </ConfigItem>\r\n        </ConfigCard>\r\n    )\r\n}\r\n"],"sourceRoot":""}