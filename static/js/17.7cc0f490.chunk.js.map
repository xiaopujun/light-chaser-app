{"version":3,"sources":["comps/antd-common/scatter/AntdScatterCommonConfig.tsx"],"names":["AntdScatterCommonStyleConfig","legendChange","legend","props","instance","update","style","scatterCoordinateSysChange","config","scatterGraphicsChange","this","getConfig","AntdCommonScatterGraphics","onChange","Component","title","defaultValue","size","type","min","event","parseInt","target","value","itemStyle","width","contentStyle","data","mode","color","Array","isArray","buildColorModeData","exclude","options","label","shape","pointStyle","stroke","height","borderRadius","showText","lineWidth"],"mappings":"6WAiBMA,E,4MAEFC,aAAe,SAACC,GACK,EAAKC,MAAMC,SACnBC,OAAO,CAACC,MAAO,CAACJ,WAC5B,E,EAEDK,2BAA6B,SAACC,GACT,EAAKL,MAAMC,SACnBC,OAAO,CAACC,MAAOE,GAC3B,E,EAEDC,sBAAwB,SAACD,GAC0C,EAAKL,MAAMC,SACjEC,OAAO,CAACC,MAAOE,GAC3B,E,4CAED,WACI,IACMA,EADaE,KAAKP,MAAjBC,SACiCO,YAAYL,MACpD,OACI,qCACI,cAACM,EAAD,CAA2BJ,OAAQA,EAAQK,SAAUH,KAAKD,wBAC1D,cAAC,IAAD,CAAYI,SAAUH,KAAKT,aAAcO,OAAQA,EAAON,SACxD,cAAC,IAAD,CAA4BW,SAAUH,KAAKH,2BAA4BC,OAAQA,MAG1F,K,GA3BsCM,aAuC9BF,EAAsE,SAAC,GAAwB,IAAD,IAAtBJ,EAAsB,EAAtBA,OAAQK,EAAc,EAAdA,SA6BzF,OACI,cAAC,IAAD,CAAWE,MAAO,eAAlB,SACI,eAAC,IAAD,CAAYA,MAAO,qBAAnB,UACI,cAAC,IAAD,CAAYA,MAAO,eAAnB,SACI,cAAC,UAAD,CAAgBC,cAAoB,OAANR,QAAM,IAANA,OAAA,EAAAA,EAAQS,OAAkB,EACxCC,KAAM,SAAUC,IAAK,EACrBN,SAAQ,+GAAE,SAACO,GAAD,OACNP,EAAS,CAACI,KAAMI,SAASD,EAAME,OAAOC,QADhC,QAG9B,cAAC,IAAD,CAAYR,MAAO,eAAMS,UAAW,CAACC,MAAO,QAASC,aAAc,CAACD,MAAO,qBAA3E,SACI,cAAC,IAAD,CAAWZ,SArCA,SAACc,GACxB,IAAOC,EAAeD,EAAfC,KAAML,EAASI,EAATJ,MACb,OAAQK,GACJ,IAAK,SAGL,IAAK,QACDf,EAAS,CAACgB,MAAON,IAG5B,EA2BwDI,KAzB9B,WACvB,IAAIC,EAAO,SAAUL,EAA2B,OAChD,OAAKf,QAAL,IAAKA,KAAQqB,QACGC,MAAMC,QAAN,OAAcvB,QAAd,IAAcA,OAAd,EAAcA,EAAQqB,QAE9BD,EAAO,QACPL,GAAc,OAANf,QAAM,IAANA,OAAA,EAAAA,EAAQqB,QAAqB,CAAC,UAEtCD,EAAO,SACPL,EAAK,OAAGf,QAAH,IAAGA,OAAH,EAAGA,EAAQqB,QAGxB,MAAO,CAACD,OAAML,QACjB,CAY8DS,GAAsBC,QAAS,CAAC,gBAEnF,cAAC,IAAD,CAAYlB,MAAO,eAAnB,SACI,cAAC,UAAD,CAAQmB,QAAS,CACb,CAACX,MAAO,SAAUY,MAAO,gBACzB,CAACZ,MAAO,SAAUY,MAAO,gBACzB,CAACZ,MAAO,SAAUY,MAAO,gBACzB,CAACZ,MAAO,UAAWY,MAAO,gBAC1B,CAACZ,MAAO,UAAWY,MAAO,sBAC1B,CAACZ,MAAO,WAAYY,MAAO,uBACvBnB,cAAoB,OAANR,QAAM,IAANA,OAAA,EAAAA,EAAQ4B,QAAmB,SACzCvB,SAAQ,+GAAE,SAACU,GAAD,OAAWV,EAAS,CAACuB,MAAOb,GAA5B,QAEtB,cAAC,IAAD,CAAYR,MAAO,qBAAnB,SACI,cAAC,IAAD,CAAeU,MAAO,OAAtB,SACI,cAAC,UAAD,CAAiBT,cAAc,OAACR,QAAD,IAACA,GAAD,UAACA,EAAQ6B,kBAAT,eAAoCC,SAAoB,OACtEhC,MAAO,CAACmB,MAAO,OAAQc,OAAQ,OAAQC,aAAc,GACrDC,UAAU,EACV5B,SAAQ,+GAAE,SAACU,GAAD,OACNV,EAAS,CAACwB,WAAY,CAACC,OAAQf,IADzB,UAInC,cAAC,IAAD,CAAYR,MAAO,eAAnB,SACI,cAAC,UAAD,CAAgBC,cAAc,OAACR,QAAD,IAACA,GAAD,UAACA,EAAQ6B,kBAAT,eAAoCK,YAAuB,EACzExB,KAAM,SAAUC,IAAK,EACrBN,SAAQ,+GAAE,SAACO,GAAD,OACNP,EAAS,CAACwB,WAAY,CAACK,UAAWrB,SAASD,EAAME,OAAOC,SADlD,YAM7C,C","file":"static/js/17.7cc0f490.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {ConfigType} from \"../../../designer/right/ConfigType\";\r\nimport {AntdCartesianCoordinateSys, AntdLegend} from \"../config/AntdFragment\";\r\nimport {Scatter, ScatterOptions, ShapeStyle} from \"@antv/g2plot\";\r\nimport {Legend} from \"@antv/g2plot/lib/types/legend\";\r\nimport AbstractComponent from \"../../../framework/core/AbstractComponent\";\r\nimport AntdCommonScatter, {AntdScatterProps} from \"./AntdCommonScatter\";\r\nimport {WritableScatterOptions} from \"../types\";\r\nimport ColorMode, {ColorModeValue} from \"../../../lib/lc-color-mode/ColorMode\";\r\nimport Accordion from \"../../../lib/lc-accordion/Accordion\";\r\nimport ConfigCard from \"../../../lib/lc-config-card/ConfigCard\";\r\nimport ConfigItem from \"../../../lib/lc-config-item/ConfigItem\";\r\nimport UnderLineInput from \"../../../lib/lc-input/UnderLineInput\";\r\nimport CfgItemBorder from \"../../../lib/lc-config-item/CfgItemBorder\";\r\nimport BaseColorPicker from \"../../../lib/lc-color-picker/BaseColorPicker\";\r\nimport Select from \"../../../lib/lc-select/Select\";\r\n\r\nclass AntdScatterCommonStyleConfig extends Component<ConfigType> {\r\n\r\n    legendChange = (legend: Legend) => {\r\n        const instance = this.props.instance as AntdCommonScatter;\r\n        instance.update({style: {legend}});\r\n    }\r\n\r\n    scatterCoordinateSysChange = (config: ScatterOptions) => {\r\n        const instance = this.props.instance as AntdCommonScatter;\r\n        instance.update({style: config});\r\n    }\r\n\r\n    scatterGraphicsChange = (config: ScatterOptions) => {\r\n        const instance: AbstractComponent<Scatter, AntdScatterProps> = this.props.instance;\r\n        instance.update({style: config});\r\n    }\r\n\r\n    render() {\r\n        const {instance} = this.props;\r\n        const config: ScatterOptions = instance.getConfig().style;\r\n        return (\r\n            <>\r\n                <AntdCommonScatterGraphics config={config} onChange={this.scatterGraphicsChange}/>\r\n                <AntdLegend onChange={this.legendChange} config={config.legend}/>\r\n                <AntdCartesianCoordinateSys onChange={this.scatterCoordinateSysChange} config={config}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport {AntdScatterCommonStyleConfig};\r\n\r\n\r\nexport interface AntdCommonScatterGraphicsProps {\r\n    config?: WritableScatterOptions;\r\n\r\n    onChange(config: WritableScatterOptions): void;\r\n}\r\n\r\nexport const AntdCommonScatterGraphics: React.FC<AntdCommonScatterGraphicsProps> = ({config, onChange}) => {\r\n\r\n    const scatterColorChange = (data: ColorModeValue) => {\r\n        const {mode, value} = data;\r\n        switch (mode) {\r\n            case 'single':\r\n                onChange({color: value});\r\n                break;\r\n            case 'multi':\r\n                onChange({color: value as string[]});\r\n                break;\r\n        }\r\n    }\r\n\r\n    const buildColorModeData = (): ColorModeValue => {\r\n        let mode = 'single', value: string | string[] = '#fff';\r\n        if ((config?.color)) {\r\n            let multi = Array.isArray(config?.color);\r\n            if (multi) {\r\n                mode = 'multi';\r\n                value = config?.color as string[] || ['#fff'];\r\n            } else {\r\n                mode = 'single';\r\n                value = config?.color as string;\r\n            }\r\n        }\r\n        return {mode, value};\r\n    }\r\n\r\n    return (\r\n        <Accordion title={'图形'}>\r\n            <ConfigCard title={'数据点'}>\r\n                <ConfigItem title={'尺寸'}>\r\n                    <UnderLineInput defaultValue={config?.size as number || 5}\r\n                                    type={'number'} min={0}\r\n                                    onChange={(event) =>\r\n                                        onChange({size: parseInt(event.target.value)})}/>\r\n                </ConfigItem>\r\n                <ConfigItem title={'颜色'} itemStyle={{width: '100%'}} contentStyle={{width: 'calc(100% - 38px)'}}>\r\n                    <ColorMode onChange={scatterColorChange} data={buildColorModeData()} exclude={['gradient']}/>\r\n                </ConfigItem>\r\n                <ConfigItem title={'形状'}>\r\n                    <Select options={[\r\n                        {value: 'circle', label: '圈形'},\r\n                        {value: 'square', label: '方形'},\r\n                        {value: 'bowtie', label: '领结'},\r\n                        {value: 'diamond', label: '钻石'},\r\n                        {value: 'hexagon', label: '六角形'},\r\n                        {value: 'triangle', label: '三角形'}]}\r\n                            defaultValue={config?.shape as string || 'circle'}\r\n                            onChange={(value) => onChange({shape: value})}/>\r\n                </ConfigItem>\r\n                <ConfigItem title={'描边色'}>\r\n                    <CfgItemBorder width={'100%'}>\r\n                        <BaseColorPicker defaultValue={(config?.pointStyle as ShapeStyle)?.stroke as string || '#fff'}\r\n                                         style={{width: '100%', height: '15px', borderRadius: 2}}\r\n                                         showText={true}\r\n                                         onChange={(value) =>\r\n                                             onChange({pointStyle: {stroke: value}})}/>\r\n                    </CfgItemBorder>\r\n                </ConfigItem>\r\n                <ConfigItem title={'线宽'}>\r\n                    <UnderLineInput defaultValue={(config?.pointStyle as ShapeStyle)?.lineWidth as number || 0}\r\n                                    type={'number'} min={0}\r\n                                    onChange={(event) =>\r\n                                        onChange({pointStyle: {lineWidth: parseInt(event.target.value)}})}/>\r\n                </ConfigItem>\r\n            </ConfigCard>\r\n        </Accordion>\r\n    )\r\n}"],"sourceRoot":""}